package org.example;

import java.util.Comparator;

/**
 * Интерфейс для управления коллекциями.
 * @author Антон Городсков
 * @param <T> дженерик для обеспечения универсальности класса. Элементы коллекций могут принадлежать разным классам, но только одному в пределах каждой конкретной коллекции.
 */
interface MyList<T> {

    /**
     * Добавляет новый объект в конец коллекции.
     * @param element добавляемый объект.
     */
    void add(T element);

    /**
     * Возвращает текущий размер коллекции.
     * @return переменная int, содержащая размер коллекции.
     */
    int size();

    /**
     * Возвращает ёмкость массива, содержащего коллекцию.
     * @return переменная int, содержащая размер массива.
     */
    int capacity();

    /**
     * Возвращает элемент коллекции по индексу. Если индекс меньше ноля или больше текущего размера коллекции, выбрасывается ошибка "IndexOutOfBoundsException".
     * @param index переменная int, содержащая индекс элемента коллекции.
     * @return объект коллекции с индексом index.
     */
    T get(int index);

    /**
     * Удаляет элемент коллекции по индексу. Если индекс меньше ноля или больше текущего размера коллекции, выбрасывается ошибка "IndexOutOfBoundsException".
     * @param index переменная int, содержащая индекс элемента коллекции.
     * @return объект коллекции с индексом index.
     */
    T remove(int index);

    /**
     * Полностью очищает коллекцию. Размер содержащего коллекцию массива уменьшается до DEFAULT_CAPACITY, константы класса, определяющей стартовый размер массива при создании новой коллекции.
     */
    void destroy();

    /**
     * Сортировка массива по выбранному свойству содержащихся в нём объектов. Например, если объект описывает человека и обладает свойствами <i>name</i> и <i>age</i>, объекты коллекции можно отсортировать по имени или по возрасту.
     * @param comparator свойство объекта коллекции, основываясь на котором будет осуществляться сортировка.
     */
    void sort(Comparator<T> comparator);

    /**
     * Вставка нового элемента в произвольный индекс коллекции. Существующие элементы коллекции, начиная с указанного индекса, при этом сдвигаются вправо, а размер коллекции увеличивается на 1.
     * @param element новый объект коллекции;
     * @param index индекс в коллекции, по которому будет осуществлена вставка.
     * @return возвращает вставленный объект, как элемент коллекции.
     */
    T insert(T element, int index);

}
